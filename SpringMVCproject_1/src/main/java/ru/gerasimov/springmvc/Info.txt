Здесь заменяем XML на Java класс
 web.xml --> Java класс
 applicationContext.xml --> Java класс (@Configuration)
========================================================================================================================
Чем заменить web.xml
Начиная с 3 версии Spring Framework можно использовать Java код вместо web.xml

для этого необходимо в проекте создать Java класс, который реализует интерфейс:
org.springframework.web.WebApplicationInitializer

public class MyWebAppInitializer implements WebApplicationInitializer {
@Override
public void onStartup(ServletContext container){
//код, который до этого помещался в web.xml
}
}
Такой класс считывается автоматически и работает как web.xml
Но мы будем использовать для конфигурации абстрактный класс:
AbstractAnnotationConfigDispatcherServletInitializer

Этот класс был представлен в Spring 3.2 и он реализует интерфейс WebApplicationInitializer за нас

                                 ----------------------------
                                 | WebApplicationInitializer|
                                 ----------------------------
                                              ^
                                              |
                     --------------------------------------------------------
                     | AbstractAnnotationConfigDispatcherServletInitializer |
                     --------------------------------------------------------
                     в этом классе WebApplicationInitializer реализован за нас.
                       Нам останется лишь подставить оставшиеся мелочи
========================================================================================================================
(1) удалим все xml конфигурации
(2) создали класс SpringConfig
- реализовываем интерфейс WebMvcConfigurer и вместе с ним реализуем метод configureViewResolvers
(3) далее идем в Java класс который у нас заменяет web.xml(MySpringMVCDispetcherServletInitializer)
(4) добавим еще одну зависимость
<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <version>4.0.1</version>
    <scope>provided</scope>
</dependency>

эта зависимость используется классом AbstractAnnotationConfigDispatcherServletInitializer
========================================================================================================================
========================================================================================================================
                                                 КОНТРОЛЛЕРЫ
- обрабатывают запросы от пользователя
- обмениваются данными с моделью
- Показывают пользователю правильное представление
- Переадресовывают пользователя на другие страницы

Аннотация @Controller
- помечает класс - контроллер
- Наследуется от аннотации @Component
- Поэтому, @ComponentScan работает с @Controller так же, как и просто с @Component
- @Controller - тот же @Component, но с дополнительными возможностями

Методы контроллеров
- Методов может быть несколько в контроллере
- Обычно(но не всегда), каждый метод соответствует одному URL'у
- Обычно(но не всегда), методы возвращают строку (String)-название представления, которое надо показать пользователю
- У методов может быть любое название

Маппинг
Адрес задается с помощью маппинга
@GetMapping("/hello-world")
- @GetMapping
- @PostMapping
- @PutMapping
- @DeleteMapping
- @PatchMapping
Иногда пишут(устаревший вариант):@RequestMapping(method = RequestMethod.GET)
- Связывают метод контроллера с адресом, по которому можно к этому методу обратиться(из браузера,например)
- Всего 5 разных видов маппинга - в зависимости от того, какой HTTP запрос(с каким HTTP методом) должен прийти в
этот метод контроллера

(1) Создали папку Controllers в которой будут хранится наши Java классы контроллеры
- Создали класс FirstController и добавили два метода

    @GetMapping("/hello")
    public String helloPage(){
        return "first/hello"; //они будут лежать в папке first
    }
    @GetMapping("/goodbye")
    public String goodByePage(){
        return "first/goodbye"; //они будут лежать в папке first
    }
(2) Создали две HTML страницы
(3) Теперь усложним и сделаем переход по ссылке с одной страницы на другую
<a href="/hello">Say hello</a> это делается через тег "a" у этого тега есть аргумент href"адрес"
аналогично с другой страницей
те при нажатии на эти ссылки мы будем переходить по адресу и попадать на соответсвтующий метод контроллера
(4) Создадим еще один класс контроллер
