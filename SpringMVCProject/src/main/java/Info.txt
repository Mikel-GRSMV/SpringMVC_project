SPRING MVC
------------------------------------------------------------------------------------------------------------------------
После можно будет изучать: Hibernate, Spring Boot, Spring Security, etc.
------------------------------------------------------------------------------------------------------------------------
Что такое Spring MVC?

1. Один из компонентов Spring Framework, который позволяет разрабатывать web - приложения Java
2. Spring MVC предполагает разработку web - приложений с использованием архитектуры Model-View-Controller
3. Разрабатывая web - приложения с помощью Spring MVC, мы можем использовать все, что дает нам Spring Core -
Bean, DI, IoC, etc...
========================================================================================================================
Разберемся с архетектурой MVC.

MVC - паттерн проектирования приложений
его 3 компонента:
1.Model- логика работы с данными
2.View- логика представления, интерфейса
3.Controller- логика навигации, обработка запросов

                пользователь заходит на наше веб-приложение и совершает HTTP запрос
                                          | |
                                          | |<------DispatcherServlet
                                          | |
                                 Его запрос попадает
                                          | |
                                          | |
                                      CONTROLLER
                                          | |
                                          | |
                                Получаем данные из модели
                                          | |
                                          | |
                                        MODEL
                                          | |
                                          | |
                                  Получает данные из
                                          | |
                                          | |
                                       Database
                                          | |
                                          | |
                                  далее отображает данные
                                          | |
                                          | |
                                         View
========================================================================================================================
Из чего состоит Spring MVC приложение?

1. Из обычных Java классов(контроллеры,модели, тд)
Очень активно используются аннотации, которые применяются к классам и дают им дополнительные возможности(@Controller)
2. Набор HTML страниц(представления). К ним часто добавляется JavaScript код, который "оживляет" HTML представления
и CSS, который стилизует HTML.
3. Spring конфигурация(XML, Аннотации или Java)
========================================================================================================================
DispatcherServlet

- Является входной точкой Spring MVC приложения
- Реализован за нас командой Spring
- Мы реализуем Модели,Представления,Контроллеры(MVC)

HTTP запрос от пользователя:
1. Приходит на сервер. Сервер обрабатывает запрос и передает его на Spring MVC приложение.
2. Запрос попадает в DispatcherServlet.
3. DispatcherServlet отпраляет запрос на правильный контроллер.
========================================================================================================================
Контроллер(Controller)
Котроллер реализуется нами

1. Обрабатывает запосы от пользователя
2. Обменивается данным с моделью
3. Показывает пользователю правильное представление
4. Переадресовывает пользователя на другие страницы
5.              . . .
.               . . .
.               . . .
.               . . .

========================================================================================================================
Модель(Model)
Модель реализуется нами

1. Хранит в себе данные
2. Взаимодействует с БД для получения данных
3. Отдает данные контроллеру
4.              . . .
.               . . .
.               . . .
.               . . .



========================================================================================================================
Представления(View)
Представление реализуется нами

1. Получает данные от контроллера и отображает их в браузере
2. Для динамического отображения данных используются шаблонизаторы(Thymeleaf, Freemarker, Velocity)
                                                                   _________
========================================================================================================================
========================================================================================================================
(1) Начнем с того что мы подключим сервер tomcat к intellij idea.
Сервер - это то место,где наше Spring MVC приложение будет работать и то место к которому мы будем обращаться из нашего
браузера.
1.1 теперь нам нужно указать путь до этой папки с сервером в нашей среде разработки:
run -> Edit Configurations -> + -> local tomcat Server

(2) Создали новую переменную <spring.version>5.3.6</spring.version> и добавляем ее в версии зависимостей ${} чтобы
не хардкодить и избавиться от дуюлирования кода

(3) добавим еще одну зависимость thymeleaf-spring5
Thymeleaf предлагает набор интеграций Spring, которые позволяют использовать его как полнофункциональную замену JSP в приложениях Spring MVC.
Эти интеграции позволят вам:
Сделать сопоставление методам в ваших объектах Spring MVC Controller шаблонов, управляемых Thymeleaf, точно так же, как вы делаете это с JSP.
Использовать Spring Expression Language (Spring EL) вместо OGNL в ваших шаблонах.
Создавать формы в своих шаблонах, которые полностью интегрированы с вашими компонентами (bean) поддержки форм и привязками результатов, включая использование редакторов свойств, служб преобразования и обработки ошибок проверки.
Отображать сообщения интернационализации из файлов сообщений, управляемых Spring (через обычные объекты MessageSource).
Находить ваши шаблоны, используя собственные механизмы разрешения ресурсов Spring.

(4) Реализуем файл web.xml
Его уже создал Maven тк мы выбрали archetype webapp. Но нам теперь нужно написать там правильный код.
Зачем он вообще нужен? За что он отвечат?
в нашем случае это apache TomCat он считывает содержимое файла web.xml и тут мы можем описать о что мы хотим чтобы сервер
делал.В данном случае мы хотим чтобы сервер все HTTP запросы пользователей перенаправлял на DispatcherServlet.И когда запрос
будет попадать сначала в сервер а потом в DispatcherServlet этот запрс будет попадать SpringMVC приложение.
Здесь мы будем конфигурировать наш сервер с помощью xml.

(5) создадим applicationContext

(6) Начнем создавать компоненты. Создадим Controller и создадим представления

6.1 Создадим Controller

@Controller
public class HelloController {

    @GetMapping("hello-world")//мы указываем какой URL будет приходить в этот метод Controller'а
    public String sayHello(){
        return "hello_world!";//Наше представление должно называться hello_world.html
    }
}

6.2 Создадим представление
это представление должно находится в папке WEB-INF -> views и создадим файл hello_world.html







========================================================================================================================